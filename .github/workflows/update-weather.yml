name: Update Weather Data
permissions:
  contents: write
  
on:
  schedule:
    - cron: '*/30 * * * *'  # Every 30 minutes
  workflow_dispatch:  # Manual trigger
  
jobs:
  update-weather:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        batch: [0, 1, 2, 3, 4, 5, 6]  # 7 batches for ~311 beaches (45 beaches per batch)
      fail-fast: false  # Don't cancel other batches if one fails
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run weather updater (Batch ${{ matrix.batch }})
        run: |
          python weather_updater.py --once --batch-size 45 --batch-number ${{ matrix.batch }}
        env:
          GITHUB_ACTIONS: true
          JAWG_TOKEN: ${{ secrets.JAWG_TOKEN }}
      
      - name: Upload weather cache artifact
        uses: actions/upload-artifact@v4
        with:
          name: weather-cache-batch-${{ matrix.batch }}
          path: weather_cache.json
          retention-days: 1

  combine-and-commit:
    needs: update-weather
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Download all weather cache artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: weather-cache-batch-*
          path: artifacts/
          merge-multiple: false
      
      - name: Combine weather caches
        run: |
          python -c "
          import json
          import os
          
          combined_data = {}
          artifacts_dir = 'artifacts'
          
          print('=== DEBUG: Listing all downloaded files ===')
          for root, dirs, files in os.walk(artifacts_dir):
              for file in files:
                  filepath = os.path.join(root, file)
                  size = os.path.getsize(filepath)
                  print(f'Found file: {filepath} (size: {size} bytes)')
          
          print('=== Loading and merging batch results ===')
          batch_count = 0
          
          # Look for weather_cache.json files in all subdirectories
          for root, dirs, files in os.walk(artifacts_dir):
              for file in files:
                  if file == 'weather_cache.json':
                      filepath = os.path.join(root, file)
                      batch_count += 1
                      
                      if os.path.getsize(filepath) > 0:
                          try:
                              with open(filepath, 'r', encoding='utf-8') as f:
                                  batch_data = json.load(f)
                              
                              # Merge data
                              combined_data.update(batch_data)
                              print(f'Batch {batch_count}: Loaded {len(batch_data)} entries from {filepath}')
                          except Exception as e:
                              print(f'Batch {batch_count}: Error loading {filepath}: {e}')
                      else:
                          print(f'Batch {batch_count}: Empty file {filepath}')
          
          print(f'=== SUMMARY ===')
          print(f'Total batches found: {batch_count}')
          print(f'Combined cache contains {len(combined_data)} total entries')
          
          # Save combined result
          with open('weather_cache.json', 'w', encoding='utf-8') as f:
              json.dump(combined_data, f, ensure_ascii=False, indent=2)
          
          print(f'Successfully saved combined cache with {len(combined_data)} entries')
          "
      
      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Pull latest changes first to avoid conflicts
          git pull origin main
          
          git add weather_cache.json
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update weather cache - Combined batches - $(date)"
            git push
          fi
